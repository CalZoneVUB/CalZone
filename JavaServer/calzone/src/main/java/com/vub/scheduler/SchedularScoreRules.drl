import com.vub.model.Entry;
import com.vub.model.CourseComponent;
import com.vub.model.Course;
import com.vub.model.Traject;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import function java.util.Collections.sort;

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

/**
* This files contains all the constraints (a.k.a. rules) used by OptaPlanner to schedule our lecture entries.
* There are hard and soft constraints. 
* The rules are written in the declarative language Drools.
* 
* Documentation of OptaPlannner: http://www.optaplanner.org/learn/documentation.html
* Documentation of Drools: https://www.jboss.org/drools/documentation
*
* @author Youri 
*/
dialect "java" 

global HardSoftLongScoreHolder scoreHolder;

/**
Function used in rule 'reductionOfSpareHours'
* @author Youri
* @author Pieter (the main algorithm idea)
*/
function long checkSpareHoursAndNoonBreak(List<Entry> orderedEntryList){
	long totalDurationOfDay;
	long hoursOfClass;
	List<Pair<Integer, Integer> > listOfSpareHours;
	boolean spareHourAtNoon = false;
	long spareHours;
		
	listOfSpareHours = new ArrayList<Pair<Integer, Integer>>();
	Entry lastEntry = orderedEntryList.get(orderedEntryList.size()-1);
	Entry firstEntry = orderedEntryList.get(0);
	totalDurationOfDay = lastEntry.getEndDate().getTime() - firstEntry.getStartDate().getTime();
		
	hoursOfClass = (long) firstEntry.getCourseComponent().getDuration();
		
	Entry previousEntry = firstEntry;
	orderedEntryList.remove(0); // since we don't want firstEntry in the coming for-loop
	for(Entry e : orderedEntryList){
		int endedAt = previousEntry.getEndDate().getHours();
		int startingAt = e.getStartDate().getHours();
		if(startingAt - endedAt != 0)
			listOfSpareHours.add(new Pair<Integer,Integer>(endedAt,startingAt));
		hoursOfClass += (long) e.getCourseComponent().getDuration();
		previousEntry = e;
	}
		
	// Since totalDurationOfDay is in milliseconds, we need to convert it to hours
	totalDurationOfDay /= 60*60*1000;
	spareHours = totalDurationOfDay - hoursOfClass;
	if(lastEntry.getEndDate().getHours() <= 12 || firstEntry.getStartDate().getHours() >= 14 ){
		if(spareHours > 0)
			return -(spareHours - 1); 
		else
			return 0;
	} else {
		for(Pair<Integer,Integer> s : listOfSpareHours){
			int middle = (s.first + s.second)/2;
			if((middle >= 12) && (middle <= 14)){
				spareHourAtNoon = true;
				break;
			}
		}
		
		if(spareHourAtNoon){
			if (spareHours == 1){
				return 0;
			}
			else
				return -(spareHours - 1);
		} else 
			return -5 * spareHours;
	}
}

/**
* Rule: overlappingTeacherAgenda
* Hard constraint.
* A teacher shouldn't be scheduled twice on the same time slot
* It is impossible for a teacher to teach 2 different courses at the same time
*
* @author Youri
*/
//rule overlappingTeacherAgenda
//	@author(Youri)
//	when
//		Entry($startDate := startDate, $teachers := courseComponent.teachers, $course : courseComponent.course)
//		Entry($startDate := startDate, $teachers := courseComponent.teachers, $course != courseComponent.course)
//	then
//		scoreHolder.addHardConstraintMatch(kcontext, -1);
//end

/**
 * Rule for preventing overlap in the teacher agenda. 
 * For example: a teacher can have a course from 8 - 10am and 
 * a course from 9 - 11am. This is an overlap.
 * 
 * @author pieter
 */
rule overlappingTeacherAgenda
	when
		// For different course components
		(Entry($startDate : startDate, $teachers := courseComponent.teachers, $course : courseComponent, $endDate : calcEndDate(startDate, courseComponent)) 
		and
		Entry($startDate <= startDate, $teachers := courseComponent.teachers, $course != courseComponent, $endDate > startDate))
		or
		// For same course components but different indexInCourseComponent
		(Entry($startDate : startDate, $teachers := courseComponent.teachers, $course := courseComponent, $indexInCc : indexInCourseComponent, $endDate : calcEndDate(startDate, courseComponent))
		and
		Entry($startDate <= startDate, $teachers := courseComponent.teachers, $course := courseComponent, $indexInCc != indexInCourseComponent, $endDate > startDate))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
* Rule: roomCapacity 
* Hard constraint.
* For each lecture, the number of students that attend the course must be less or equal
* than the number of seats of all the rooms that host its lectures.
* Each student above the capacity counts as 1 point of penalty.
*
* @author Youri
*/
rule roomCapacity
	@author(Youri)
	when
		Entry($roomCapacity : room.capacity, courseComponent.roomCapacityRequirement > $roomCapacity)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -2);
end

/**
* Rule: sameRoomCourse
* Hard constraint
* It shouldn't be able to schedule 2 different courses in the same room at the same time
*
* @author Youri and Pieter
*/
rule sameRoomCourse
	@author(Youri AND Pieter)
	when
		Entry($startDate := startDate, $course : courseComponent.course, $room := room)
		Entry($startDate := startDate, $course != courseComponent.course, $room  := room)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring that each lecture starts after the specified start date, 
 * specified in CourseComponent. 
 *
 * @author Pieter
 */
rule courseStartsBeforeStartDate
	when
		Entry($startDate : startDate, $courseComponent : courseComponent, courseComponent.startingDate > startDate)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring that each lecture ends before the specified end date, 
 * specified in CourseComponent. 
 */
rule courseEndsAfterEndDate
	when
		Entry($startDate : startDate, $courseComponent : courseComponent, $startDate > courseComponent.endingDate)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end 

/**
 * Rule for ensuring the correct Roomtype (classrooms or computerroom)
 */
rule roomType
	when
		Entry(courseComponent.roomTypeRequirement != room.type)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring the presence of a projector. If there is a projector present, but 
 * not needed, there isn't a negative score.
 */
rule roomEquipmentProjector
	when
		Entry(courseComponent.roomProjectorRequirement == true && room.hasProjector == false)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule roomEquipmentRecorder
	when
		Entry(courseComponent.roomRecorderRequirement == true && room.hasRecorder == false)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule roomEquipmentSMARTBoard
	when
		Entry(courseComponent.roomSMARTBoardRequirement == true && room.hasSmartBoard == false)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for preventing that different lectures of same course components are scheduled
 * after each other.
 * 
 * @author Pieter
 */
rule preventAdjacentLecturesOfSameCourseComponent
	when
		Entry($cc := courseComponent, $indexInCc : indexInCourseComponent, $adjacentDate : calcEndDate(startDate, courseComponent))
		Entry($cc := courseComponent, $indexInCc != indexInCourseComponent, $adjacentDate == startDate)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end 


/**
* Rule: noon break
* Soft constaint.
* People are hungry at noon. Therefore a break is recommended around noon.
* This rule should try to avoid lectures to be scheduled during noon.
* 
* @author Youri
*/
rule noonBreak
	@author(Youri)
	when
		Entry($startHour : startDate!.hours, $endHour : calcEndDate(startDate, courseComponent).hours)
		eval((12 <= ($startHour + $endHour) / 2) && (($startHour + $endHour) / 2 <= 13))
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

/**
* Rule: Maximum Duration of school day
* Soft constraint.
* Too much lectures on the same day is tiring. 
* A school day of maximum 9 hours per day is recommended.
*
* @author Youri
*/
rule maximumDurationOfSchoolDay
	@author(Youri)
	when
		Date($day := day, $month := month, $year := year)
		accumulate(Entry($day := startDate.day, $month := startDate.month, $year := startDate.year, $duration : courseComponent.duration);
			       $totalDuration : sum($duration);
			       $totalDuration > 9)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

/**
* Rule: Reduction of spare hours with noonBreak
* Soft constraint.
*
* This difficult constraint has been created out of the following idea:
* Students don't like spare hours, meaning that they don't want to wait e.g. 3 hours until the next class takes place.
* Yet on the other hand, students want a break at noon
* This constraint will try to enforce the best of two worlds: few spare hours with a break around noon
* This constraint uses the function 'checkSpareHoursAndNoonBreak' to calculate the score.
*
* @author Youri
*/
rule reductionOfSpareHours
	when
		Date($day : day, $month : month, $year : year) 
		$orderedLecturesOnSameDay: ArrayList() from collect (Entry($day := startDate.day, 
																   		  $month := startDate.month,
																   		  $year := startDate.year))
	then
		$score : checkSpareHoursAndNoonBreak(sort($orderedLecturesOnSameDay));
		scoreHolder.addSoftConstraintMatch(kcontext, $score);
end
