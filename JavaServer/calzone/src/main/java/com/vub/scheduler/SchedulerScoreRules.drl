import com.vub.model.Entry;
import com.vub.model.CourseComponent;
import com.vub.model.Course;
import com.vub.model.Traject;
import com.vub.model.TeacherUnavailability;
import com.vub.scheduler.SchedulerSolver;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import function java.util.Collections.sort;
import function com.vub.scheduler.SchedulerHelper.checkSpareHoursAndNoonBreak;

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

/**
* This files contains all the constraints (a.k.a. rules) used by OptaPlanner to schedule our lecture entries.
* There are hard and soft constraints. 
* The rules are written in the declarative language Drools.
* 
* Documentation of OptaPlannner: http://www.optaplanner.org/learn/documentation.html
* Documentation of Drools: https://www.jboss.org/drools/documentation
*
* @author Youri 
*/
dialect "java" 

global HardSoftLongScoreHolder scoreHolder;

/**
 * Rule for preventing overlap in the teacher agenda. 
 * For example: a teacher can have a course from 8 - 10am and 
 * a course from 9 - 11am. This is an overlap.
 * 
 * @author Pieter Meiresone
 */
rule teacherAgendaViolated
	when
		// For different course components
		(Entry($startingDate : startingDate, $teacher := courseComponent.teachers, 
			$course : courseComponent, $endDate : calcEndDate(startingDate, courseComponent)) 
		and
		Entry($startingDate <= startingDate, $teacher := courseComponent.teachers, 
			$course != courseComponent, $endDate > startingDate))
		or
		// For same course components but different indexInCourseComponent
		(Entry($startingDate : startingDate,  $teacher := courseComponent.teachers, 
			$course := courseComponent, $indexInCc : indexInCourseComponent, 
			$endDate : calcEndDate(startingDate, courseComponent))
		and
		Entry($startingDate <= startingDate, $teacher := courseComponent.teachers, 
			$course := courseComponent, $indexInCc != indexInCourseComponent, $endDate > startingDate))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for preventing overlap in the student agenda.
 * The student agenda is declared by a traject. A traject contains of a group
 * of courses which may not overlap.
 * 
 * @author Pieter Meiresone
 */
rule studentAgendaViolated
	when
		$traject : Traject()
		and
		// For different course components
		((Entry($startingDate : startingDate, courseComponent.course memberOf $traject.courses, 
			$courseComponent : courseComponent, $endDate : calcEndDate(startingDate, courseComponent)) 
		and
		Entry($startingDate <= startingDate, courseComponent.course memberOf $traject.courses,
			$courseComponent != courseComponent, $endDate > startingDate))
		or
		// For same course components but different indexInCourseComponent
		(Entry($startingDate : startingDate, courseComponent.course memberOf $traject.courses, 
			$courseComponent := courseComponent, $indexInCc : indexInCourseComponent, 
			$endDate : calcEndDate(startingDate, courseComponent)) 
		and
		Entry($startingDate <= startingDate, courseComponent.course memberOf $traject.courses,
			$courseComponent := courseComponent, $indexInCc != indexInCourseComponent, $endDate > startingDate)))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
* Rule: roomCapacity 
* Hard constraint.
* For each lecture, the number of students that attend the course must be less or equal
* than the number of seats of all the rooms that host its lectures.
* Each student above the capacity counts as 1 point of penalty.
*
* @author Youri
*/
rule roomCapacityViolated
	when
		Entry($roomCapacity : room.capacity, courseComponent.roomCapacityRequirement > $roomCapacity)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -2);
end

/**
* Rule: sameRoomCourse
* Hard constraint
* It shouldn't be able to schedule 2 different courses in the same room at the same time
*
* @author Youri and Pieter
*/
rule roomAgendaViolated
	when
		Entry($startingDate := startingDate, $cc : courseComponent, $room := room)
		Entry($startingDate := startingDate, $cc != courseComponent, $room  := room)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring that each lecture starts after the specified start date, 
 * specified in CourseComponent. 
 *
 * @author Pieter
 */
rule courseStartDateViolated
	when
		Entry($startingDate : startingDate, $courseComponent : courseComponent, courseComponent.startingDate > startingDate)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring that each lecture ends before the specified end date, 
 * specified in CourseComponent. 
 */
rule courseEndDateViolated
	when
		Entry($startingDate : startingDate, $courseComponent : courseComponent, $startingDate > courseComponent.endingDate)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end 

/**
 * Rule for ensuring the correct Roomtype (classrooms or computerroom)
 */
rule roomTypeViolated
	when
		Entry(courseComponent.roomTypeRequirement != room.type)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring the presence of a projector. If there is a projector present, but 
 * not needed, there isn't a negative score.
 */
rule roomProjectorViolated
	when
		Entry(courseComponent.roomProjectorRequirement == true && room.projectorEquipped == false)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule roomRecorderViolated
	when
		Entry(courseComponent.roomRecorderRequirement == true && room.recorderEquipped == false)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule roomSmartBoardViolated
	when
		Entry(courseComponent.roomSmartBoardRequirement == true && room.smartBoardEquipped == false)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
end

/**
 * Rule for ensuring that the course is given at the prefered time slot.
 */
rule teacherLecturePreferenceViolated
	when 
		Entry(!(courseComponent.teacherLecturePreference != null 
				&& courseComponent.teacherLecturePreference.dayOfWeek == getDayOfWeek(startingDate) 
				&& courseComponent.teacherLecturePreference.startingHour <= getHourOfDay(startingDate)
				&& courseComponent.teacherLecturePreference.endingHour >= getHourOfDay(endingDate)))
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

rule teacherUnavailabilityViolated
	when
		Entry(getTeacher() != null, $teacherUnavailabilities : getTeacher().teacherUnavailabilities, 
				$dayOfWeek : getDayOfWeek(startingDate), 
				$startingHour : getHourOfDay(startingDate), 
				$endingHour : getHourOfDay(endingDate))
		TeacherUnavailability(dayOfWeek == $dayOfWeek, 
								startingHour <= $startingHour, 
								endingHour >= $endingHour) from $teacherUnavailabilities
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

/**
 * Rule for preventing that different lectures of same course components are scheduled
 * after each other.
 * 
 * @author Pieter Meiresone
 */
rule adjacentCcViolated
	when
		Entry($cc := courseComponent, $indexInCc : indexInCourseComponent, $adjacentDate : calcEndDate(startingDate, courseComponent))
		Entry($cc := courseComponent, $indexInCc != indexInCourseComponent, $adjacentDate == startingDate)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

/**
* Rule: Maximum Duration of school day.
* Soft constraint.
* Too much lectures (member of the same traject) on the same day is tiring. 
* A school day of maximum 9 hours per day is recommended.
*
* @author Youri Coppens
*/
rule studentAgendaDurationViolated
	when
		$traject : Traject()
		Date($day := day, $month := month, $year := year)
		accumulate(Entry($day := startingDate.getDay(), $month := startingDate.getMonth(), $year := startingDate.getYear(), 
						$duration : courseComponent.getDuration(), courseComponent.course memberOf $traject.courses);
			       $totalDuration : sum($duration);
			       $totalDuration > 9)
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end

/**
* Rule: Reduction of spare hours with noonBreak
* Soft constraint.
*
* This difficult constraint has been created out of the following idea:
* Students don't like spare hours, meaning that they don't want to wait e.g. 3 hours until the next class takes place.
* Yet on the other hand, students want a break at noon
* This constraint will try to enforce the best of two worlds: few spare hours with a break around noon
* This constraint uses the function 'checkSpareHoursAndNoonBreak' to calculate the score.
*
* @author Youri Coppens
*/
rule spareHoursViolated
	when
		$traject : Traject()
		Date($day := day, $month := month, $year := year)
		$orderedLecturesOnSameDay: ArrayList(size > 0) from collect 
			(Entry($day := startingDate.getDay(), $month := startingDate.getMonth(),
				$year := startingDate.getYear(), courseComponent.course memberOf $traject.courses))
	then
		sort($orderedLecturesOnSameDay);
		scoreHolder.addSoftConstraintMatch(kcontext, checkSpareHoursAndNoonBreak($orderedLecturesOnSameDay));
end
